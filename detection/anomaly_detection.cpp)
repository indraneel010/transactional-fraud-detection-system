#include <iostream>
#include <vector>
#include <string>
#include <unordered_map>

class AnomalyDetector {
private:
    double threshold;

public:
    // Constructor
    AnomalyDetector(double threshold) : threshold(threshold) {}

    // Method to detect anomalies
    std::vector<std::unordered_map<std::string, double>> detectAnomalies(
        const std::vector<std::unordered_map<std::string, double>>& transactions) {
        
        std::vector<std::unordered_map<std::string, double>> results;

        for (const auto& transaction : transactions) {
            double amount = transaction.at("amount");
            double anomaly_score = amount / 10000.0; // Example calculation
            bool is_anomaly = anomaly_score > threshold;

            // Add results
            results.push_back({
                {"transaction_id", transaction.at("transaction_id")},
                {"anomaly_score", anomaly_score},
                {"is_anomaly", static_cast<double>(is_anomaly)}
            });
        }
        return results;
    }
};

// Example usage
int main() {
    AnomalyDetector detector(0.5);

    // Input transactions
    std::vector<std::unordered_map<std::string, double>> transactions = {
        {{"transaction_id", 1}, {"amount", 500}},
        {{"transaction_id", 2}, {"amount", 15000}},
        {{"transaction_id", 3}, {"amount", 1000}}
    };

    // Detect anomalies
    auto results = detector.detectAnomalies(transactions);

    // Output results
    for (const auto& result : results) {
        std::cout << "Transaction ID: " << result.at("transaction_id")
                  << ", Anomaly Score: " << result.at("anomaly_score")
                  << ", Is Anomaly: " << (result.at("is_anomaly") ? "Yes" : "No")
                  << std::endl;
    }

    return 0;
}
